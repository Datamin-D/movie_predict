{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "MoviePredict_models_LR",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyMl1pPAWBoiHoVQ+a9qU9lt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Datamin-D/movie_predict/blob/master/MoviePredict_models_LR.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VF-ORkd3nwse"
      },
      "source": [
        "Models: 1. Linear Regression, 2. SVM"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w19Da9nFJpFk"
      },
      "source": [
        "# 모든 모델 공통 돌리기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FlCUxa5oS-qy"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn import linear_model\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import statsmodels.api as sm\n",
        "from scipy import stats"
      ],
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RyEf1WF0n_rp",
        "outputId": "e3a57721-286a-496b-ee48-7c5f4f918a35",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /gdrive; to attempt to forcibly remount, call drive.mount(\"/gdrive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R_jWExjNn5JZ",
        "outputId": "e3ad149b-727e-482d-e793-1e03d28ed809",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        }
      },
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv(\"/gdrive/My Drive/movie_predict/preprocessed_df/preprocessed_df.csv\")\n",
        "df.columns"
      ],
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Unnamed: 0', 'Movie_title', 'Rate', 'Rating_count', 'Run_time',\n",
              "       'Gross_USA', 'Released_date', 'Action', 'Adult', 'Adventure',\n",
              "       'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama',\n",
              "       'Family', 'Fantasy', 'History', 'Horror', 'Music', 'Musical', 'Mystery',\n",
              "       'News', 'Reality-TV', 'Romance', 'Sci-Fi', 'Sport', 'Thriller', 'War',\n",
              "       'Western', 'English', '12', 'TV-MA', 'R', 'NC-17', 'TV-Y7', 'Unrated',\n",
              "       'PG-13', 'PG', 'TV-PG', 'TV-14', 'G', 'TV-G', 'TV-Y', 'TV-Y7-FV',\n",
              "       'Approved', 'M', 'Big6_distributor', 'Opening Weekend sales',\n",
              "       'Opening Weekend date', 'star_winner', 'star_nominee',\n",
              "       'director_winner', 'director_nominee', 'writer_winner',\n",
              "       'writer_nominee', 'year'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B3rFTQAvoxv9"
      },
      "source": [
        "#drop unused columns in training LinearRegression\n",
        "drop_col = ['Unnamed: 0', 'Movie_title', 'Released_date', 'Opening Weekend date', 'year','Reality-TV', 'Rate', 'Rating_count'] #Rate, Rating \n",
        "df = df.drop(drop_col,axis = 1)"
      ],
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PyQkTYIk2Sxz"
      },
      "source": [
        "# dataset 탐색"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oe-3xSEtqx1A",
        "outputId": "7f4e3d48-d441-42c1-9d61-090b20d97710",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline \n",
        "#이 코드는 notebook을 실행한 브라우저에서 바로 그림을 볼 수 있게 해주는 것- 안해도 잘 되던데..?\n",
        "\n",
        "import seaborn as sns\n",
        "sns.set() #이 명령어는 sns 기본 셋팅으로 불러오는것-?\n",
        "\n",
        "facet = sns.FacetGrid(df, aspect=4) #도화지에 선긋기\n",
        "facet.map(sns.kdeplot, 'Gross_USA') #커널밀도 추정 kdeplot\n",
        "facet.add_legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 872.8x216 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lFHoSLg1sZJl"
      },
      "source": [
        "#히트맵 필요할떄 돌리기\n",
        "\n",
        "# plt.figure(figsize=(40,35))\n",
        "# sns.heatmap(df.corr(), annot=True, fmt='.2f', square=True)\n",
        "\n",
        "# plt.show()"
      ],
      "execution_count": 121,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xGPIzd9p1uxj",
        "outputId": "3a793043-e471-425e-c751-061361670687",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        }
      },
      "source": [
        "#Scaling 없이 LR 돌리는 코드\n",
        "\n",
        "train_data = df.drop('Gross_USA',axis = 1)\n",
        "target_data = df['Gross_USA']\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(train_data, target_data, test_size=0.2) \n",
        "\n",
        "\n",
        "print(x_train.shape, y_train.shape,\"\\n\")\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "lr = LinearRegression().fit(x_train,y_train)\n",
        "\n",
        "\n",
        "print(\"train set score(R square):\",lr.score(x_train,y_train))\n",
        "print(\"test set score(R square):\",lr.score(x_test,y_test))"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(8164, 52) (8164,) \n",
            "\n",
            "train set score(R square): 0.901665616556367\n",
            "test set score(R square): 0.9102476762987902\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9_6eTf2iH0zj"
      },
      "source": [
        "# Scaling, Train_Test_Split"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FAP3QFyp2itN",
        "outputId": "c8fa0709-eb7c-4c1e-9b08-2d1d2aef615b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        }
      },
      "source": [
        "#Scaling \n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "scaler = MinMaxScaler()\n",
        "scaler.fit(df)\n",
        "\n",
        "scaled = scaler.transform(df) #dataframe을 input으로 받고 array를 반환함.\n",
        "\n",
        "#Runtime Min_Max_Scaler \n",
        "df_scaled = pd.DataFrame(data = scaled, columns = df.columns)\n",
        "df['Min_Max_run_time'] = df_scaled['Run_time']\n",
        "\n",
        "df['log_Gross_USA'] = df['Gross_USA'].apply(lambda x: np.log(x))\n",
        "df['log_Opening Weekend sales'] = df['Opening Weekend sales'].apply(lambda x: np.log(x))\n",
        "\n",
        "df_scaled = df.drop(['Run_time','Gross_USA','Opening Weekend sales'],axis = 1)\n",
        "df_scaled\n"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Action</th>\n",
              "      <th>Adult</th>\n",
              "      <th>Adventure</th>\n",
              "      <th>Animation</th>\n",
              "      <th>Biography</th>\n",
              "      <th>Comedy</th>\n",
              "      <th>Crime</th>\n",
              "      <th>Documentary</th>\n",
              "      <th>Drama</th>\n",
              "      <th>Family</th>\n",
              "      <th>Fantasy</th>\n",
              "      <th>History</th>\n",
              "      <th>Horror</th>\n",
              "      <th>Music</th>\n",
              "      <th>Musical</th>\n",
              "      <th>Mystery</th>\n",
              "      <th>News</th>\n",
              "      <th>Romance</th>\n",
              "      <th>Sci-Fi</th>\n",
              "      <th>Sport</th>\n",
              "      <th>Thriller</th>\n",
              "      <th>War</th>\n",
              "      <th>Western</th>\n",
              "      <th>English</th>\n",
              "      <th>12</th>\n",
              "      <th>TV-MA</th>\n",
              "      <th>R</th>\n",
              "      <th>NC-17</th>\n",
              "      <th>TV-Y7</th>\n",
              "      <th>Unrated</th>\n",
              "      <th>PG-13</th>\n",
              "      <th>PG</th>\n",
              "      <th>TV-PG</th>\n",
              "      <th>TV-14</th>\n",
              "      <th>G</th>\n",
              "      <th>TV-G</th>\n",
              "      <th>TV-Y</th>\n",
              "      <th>TV-Y7-FV</th>\n",
              "      <th>Approved</th>\n",
              "      <th>M</th>\n",
              "      <th>Big6_distributor</th>\n",
              "      <th>star_winner</th>\n",
              "      <th>star_nominee</th>\n",
              "      <th>director_winner</th>\n",
              "      <th>director_nominee</th>\n",
              "      <th>writer_winner</th>\n",
              "      <th>writer_nominee</th>\n",
              "      <th>Min_Max_run_time</th>\n",
              "      <th>log_Gross_USA</th>\n",
              "      <th>log_Opening Weekend sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.125000</td>\n",
              "      <td>18.024722</td>\n",
              "      <td>16.750932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.091146</td>\n",
              "      <td>11.373192</td>\n",
              "      <td>10.685195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.066406</td>\n",
              "      <td>16.631147</td>\n",
              "      <td>15.577646</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.078125</td>\n",
              "      <td>16.978034</td>\n",
              "      <td>15.896701</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.104167</td>\n",
              "      <td>16.993903</td>\n",
              "      <td>15.840513</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10200</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.085937</td>\n",
              "      <td>12.960625</td>\n",
              "      <td>12.331250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10201</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.084635</td>\n",
              "      <td>13.490707</td>\n",
              "      <td>12.133115</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10202</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.075521</td>\n",
              "      <td>11.428282</td>\n",
              "      <td>10.751928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10203</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.072917</td>\n",
              "      <td>12.864023</td>\n",
              "      <td>9.812797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10204</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.078125</td>\n",
              "      <td>10.842518</td>\n",
              "      <td>9.404590</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10205 rows × 50 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       Action  Adult  ...  log_Gross_USA  log_Opening Weekend sales\n",
              "0         1.0    0.0  ...      18.024722                  16.750932\n",
              "1         1.0    0.0  ...      11.373192                  10.685195\n",
              "2         1.0    0.0  ...      16.631147                  15.577646\n",
              "3         1.0    0.0  ...      16.978034                  15.896701\n",
              "4         1.0    0.0  ...      16.993903                  15.840513\n",
              "...       ...    ...  ...            ...                        ...\n",
              "10200     0.0    0.0  ...      12.960625                  12.331250\n",
              "10201     0.0    0.0  ...      13.490707                  12.133115\n",
              "10202     0.0    0.0  ...      11.428282                  10.751928\n",
              "10203     0.0    0.0  ...      12.864023                   9.812797\n",
              "10204     0.0    0.0  ...      10.842518                   9.404590\n",
              "\n",
              "[10205 rows x 50 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fAToxdCO2lc_"
      },
      "source": [
        "#오래걸림 돌리지 마시오 scaling 한 후 heatmap\n",
        "\n",
        "# plt.figure(figsize=(40,35))\n",
        "# sns.heatmap(df_scaled, annot=True, fmt='.2f', square=True)\n",
        "\n",
        "# plt.show()"
      ],
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JNaFY1tlIlzP"
      },
      "source": [
        "# 1.Linear Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HALhJcpx3GJd",
        "outputId": "13d2d41b-184d-47a8-9173-53940d74c91a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        }
      },
      "source": [
        "#LR학습, 예측, 성과평가\n",
        "#R, MAE, MSE, RMSE, MAPE, MPE\n",
        "\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "lr = LinearRegression().fit(x_train,y_train)\n",
        "train_pred = lr.predict(x_train)\n",
        "test_pred = lr.predict(x_test)\n",
        "y_train= np.array(y_train)\n",
        "\n",
        "metrics(lr,x_train,y_train,x_test,y_test,train_pred,test_pred)"
      ],
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train set score(R square): 0.9\n",
            "test set score(R square): 0.88 \n",
            "\n",
            "train set score(MAE): 6811669.01\n",
            "test set score(MAE): 6915350.03 \n",
            "\n",
            "train set score(MSE): 272124222613138.84\n",
            "test set score(MSE): 370695357991662.06 \n",
            "\n",
            "train set score(RMSE): 16496188.12\n",
            "test set score(RMSE): 19253450.55 \n",
            "\n",
            "train set score(MAPE): 13944.93\n",
            "test set score(MAPE): 18882.45 \n",
            "\n",
            "train set score(MPE): 3182.91 %\n",
            "test set score(MPE): 4362.33 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZK_ANnepJjG4",
        "outputId": "0621ecdd-a574-441c-ab16-f8768488e90e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "#p value\n",
        "import statsmodels.api as sm\n",
        "from scipy import stats\n",
        "\n",
        "#X,y가 뭐가 들어가야하는지\n",
        "X = train_data\n",
        "y = target_data\n",
        "\n",
        "\n",
        "\n",
        "X2 = sm.add_constant(X)\n",
        "est = sm.OLS(y, X2)\n",
        "est2 = est.fit()\n",
        "print(est2.summary())"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:              Gross_USA   R-squared:                       0.454\n",
            "Model:                            OLS   Adj. R-squared:                  0.452\n",
            "Method:                 Least Squares   F-statistic:                     172.7\n",
            "Date:                Wed, 28 Oct 2020   Prob (F-statistic):               0.00\n",
            "Time:                        12:05:35   Log-Likelihood:            -1.9292e+05\n",
            "No. Observations:               10205   AIC:                         3.859e+05\n",
            "Df Residuals:                   10155   BIC:                         3.863e+05\n",
            "Df Model:                          49                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "===================================================================================================\n",
            "                                      coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------------------\n",
            "const                           -6.586e+07   3.05e+06    -21.594      0.000   -7.18e+07   -5.99e+07\n",
            "Action                          -1.698e+06   1.34e+06     -1.268      0.205   -4.32e+06    9.27e+05\n",
            "Adult                            9.139e+06   3.94e+07      0.232      0.817   -6.81e+07    8.63e+07\n",
            "Adventure                        2.731e+07    1.6e+06     17.108      0.000    2.42e+07    3.04e+07\n",
            "Animation                        1.847e+05    2.5e+06      0.074      0.941   -4.71e+06    5.08e+06\n",
            "Biography                       -4.605e+06   1.48e+06     -3.104      0.002   -7.51e+06    -1.7e+06\n",
            "Comedy                          -5.377e+06   1.08e+06     -4.977      0.000   -7.49e+06   -3.26e+06\n",
            "Crime                           -5.086e+06   1.27e+06     -3.998      0.000   -7.58e+06   -2.59e+06\n",
            "Documentary                     -1.973e+06   1.72e+06     -1.150      0.250   -5.34e+06    1.39e+06\n",
            "Drama                           -7.171e+06   1.14e+06     -6.303      0.000    -9.4e+06   -4.94e+06\n",
            "Family                             1.4e+06   2.17e+06      0.646      0.518   -2.85e+06    5.65e+06\n",
            "Fantasy                          8.832e+06   1.89e+06      4.677      0.000    5.13e+06    1.25e+07\n",
            "History                         -3.294e+06   1.92e+06     -1.712      0.087   -7.07e+06    4.77e+05\n",
            "Horror                          -7.786e+06    1.8e+06     -4.323      0.000   -1.13e+07   -4.26e+06\n",
            "Music                           -3.915e+06   1.87e+06     -2.088      0.037   -7.59e+06    -2.4e+05\n",
            "Musical                           -3.2e+06    3.6e+06     -0.888      0.374   -1.03e+07    3.86e+06\n",
            "Mystery                         -4.661e+06   1.71e+06     -2.731      0.006   -8.01e+06   -1.32e+06\n",
            "News                             1.872e+06   7.27e+06      0.257      0.797   -1.24e+07    1.61e+07\n",
            "Romance                         -4.549e+06   1.16e+06     -3.920      0.000   -6.82e+06   -2.27e+06\n",
            "Sci-Fi                           2.459e+07   2.23e+06     11.050      0.000    2.02e+07     2.9e+07\n",
            "Sport                           -9.054e+06   2.58e+06     -3.514      0.000   -1.41e+07      -4e+06\n",
            "Thriller                        -1.767e+06   1.42e+06     -1.248      0.212   -4.54e+06    1.01e+06\n",
            "War                             -3.157e+05   2.76e+06     -0.114      0.909   -5.73e+06     5.1e+06\n",
            "Western                         -3.473e+06    5.4e+06     -0.643      0.520   -1.41e+07    7.12e+06\n",
            "English                          5.903e+06   1.23e+06      4.799      0.000    3.49e+06    8.31e+06\n",
            "12                               5.235e+07   3.94e+07      1.327      0.185    -2.5e+07     1.3e+08\n",
            "TV-MA                              6.8e+06   2.85e+06      2.384      0.017    1.21e+06    1.24e+07\n",
            "R                                1.273e+06   2.09e+06      0.610      0.542   -2.82e+06    5.36e+06\n",
            "NC-17                           -6.785e+06   1.02e+07     -0.663      0.507   -2.68e+07    1.33e+07\n",
            "TV-Y7                            4.538e+06   1.01e+07      0.449      0.654   -1.53e+07    2.44e+07\n",
            "Unrated                          9.791e+06   2.04e+06      4.810      0.000     5.8e+06    1.38e+07\n",
            "PG-13                            9.049e+06    2.2e+06      4.113      0.000    4.74e+06    1.34e+07\n",
            "PG                               2.068e+06   2.56e+06      0.809      0.419   -2.95e+06    7.08e+06\n",
            "TV-PG                            1.864e+07   3.18e+06      5.858      0.000    1.24e+07    2.49e+07\n",
            "TV-14                            1.606e+07   2.15e+06      7.488      0.000    1.19e+07    2.03e+07\n",
            "G                                3.356e+06   4.18e+06      0.803      0.422   -4.84e+06    1.16e+07\n",
            "TV-G                             4.744e+07   4.38e+06     10.843      0.000    3.89e+07     5.6e+07\n",
            "TV-Y                             -5.04e+07   1.89e+07     -2.668      0.008   -8.74e+07   -1.34e+07\n",
            "TV-Y7-FV                        -3.077e+07   2.01e+07     -1.529      0.126   -7.02e+07    8.68e+06\n",
            "Approved                        -4.975e+07   2.79e+07     -1.784      0.074   -1.04e+08    4.92e+06\n",
            "M                               -4.468e+06    2.8e+07     -0.160      0.873   -5.93e+07    5.03e+07\n",
            "Big6_distributor                 7.282e+06   1.74e+06      4.178      0.000    3.87e+06    1.07e+07\n",
            "star_winner                      7.445e+06   1.22e+06      6.083      0.000    5.05e+06    9.84e+06\n",
            "star_nominee                     3.742e+06   1.18e+06      3.183      0.001    1.44e+06    6.05e+06\n",
            "director_winner                   1.56e+07   3.58e+06      4.361      0.000    8.59e+06    2.26e+07\n",
            "director_nominee                -2.529e+06   2.38e+06     -1.061      0.289    -7.2e+06    2.14e+06\n",
            "writer_winner                    -1.82e+06   3.36e+06     -0.541      0.588   -8.41e+06    4.77e+06\n",
            "writer_nominee                   1.193e+07   2.07e+06      5.759      0.000    7.87e+06     1.6e+07\n",
            "Min_Max_run_time                 1.422e+08   1.62e+07      8.756      0.000     1.1e+08    1.74e+08\n",
            "Min_Max_log_opening_weekend_USA  1.159e+08   3.05e+06     37.965      0.000     1.1e+08    1.22e+08\n",
            "==============================================================================\n",
            "Omnibus:                    11610.445   Durbin-Watson:                   1.911\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          2016068.670\n",
            "Skew:                           5.704   Prob(JB):                         0.00\n",
            "Kurtosis:                      70.906   Cond. No.                         181.\n",
            "==============================================================================\n",
            "\n",
            "Warnings:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "grNEE7vl-qDl"
      },
      "source": [
        "# 2.SVR"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KzVL73c0Cknk",
        "outputId": "1e332392-a0a5-4525-b98a-be30574a2580",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        }
      },
      "source": [
        "from sklearn.svm import LinearSVR\n",
        "svm_reg = LinearSVR(epsilon = 1.5)\n",
        "svm_reg.fit(x_train, y_train)\n",
        "\n",
        "train_pred = svm_reg.predict(x_train) \n",
        "test_pred = svm_reg.predict(x_test)\n",
        "\n",
        "metrics(svm_reg,x_train,y_train,x_test,y_test,train_pred,test_pred)"
      ],
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train set score(R square): -0.14\n",
            "test set score(R square): -0.13 \n",
            "\n",
            "train set score(MAE): 19154467.13\n",
            "test set score(MAE): 20792674.51 \n",
            "\n",
            "train set score(MSE): 3033215024519466.0\n",
            "test set score(MSE): 3887240692750624.5 \n",
            "\n",
            "train set score(RMSE): 55074631.41\n",
            "test set score(RMSE): 62347740.08 \n",
            "\n",
            "train set score(MAPE): 139.05\n",
            "test set score(MAPE): 132.71 \n",
            "\n",
            "train set score(MPE): 7.95 %\n",
            "test set score(MPE): 16.35 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RsUErHNHdJXg",
        "outputId": "340a52ae-d36e-4614-968e-95149e35342c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 172
        }
      },
      "source": [
        "sklearn.feature_selection.f_regression(x_train, y_train)"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-75-a1a6483e2b6a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature_selection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_regression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'sklearn' is not defined"
          ]
        }
      ]
    }
  ]
}
